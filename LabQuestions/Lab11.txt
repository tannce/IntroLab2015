1.ฟังก์ชันของลิสต์

ให้นิสิตใช้ฟังก์ชันที่ทำงานกับลิสต์เพื่อทำคำสั่งต่อไปนี้ กำหนดให้ลิสต์มีชื่อว่า ls และมีสมาชิกเป็นตัวอักษร ให้นิสิตใส่โค๊ดในการเรียกใช้ฟังก์ชันในช่องว่างทางขวาที่มีให้ ข้อ 6-9 มีโค๊ดสำหรับการพิมพ์ให้แล้ว ไม่ต้องสั่ง print อีก ให้ใส่แต่โค๊ดในการจัดการลิสต์ตามคำสั่งเท่านั้น

คำสั่งที่ให้มาสามารถใช้ฟังก์ชันที่มีอยู่แล้วทำได้ทันทีโดยใช้แค่ฟังก์ชันเดียว นิสิตควรอ่าน help ของลิสต์ใน Wing IDE โดยพิมพ์ help([]) ที่ prompt ของ Python Shell


คำสั่ง
โค๊ด
1) เรียงลำดับลิสต์ ls จากน้อยไปมาก	
command.append("")
2) เรียงลำดับลิสต์ ls จากมากไปน้อย	
command.append("")
3) กลับลิสต์ (จากหัวให้เป็นหาง)	
command.append("")
4) เพิ่มสมาชิก 'k' ทางท้ายของลิสต์	
command.append("")
5) เพิ่มสมาชิก 'k' ก่อนหน้าดัชนีที่ 3 ของลิสต์	
command.append("")
6) ดึงสมาชิกตัวสุดท้ายออกจากลิสต์และพิมพ์สมาชิกนั้น	
command.append("print()")
7) ค้นหาสมาชิก 'd' ตัวแรกว่าอยู่ที่ดัชนีใด และพิมพ์ดัชนีนั้น	
command.append("print()")
8) ดึงสมาชิกที่อยู่ที่ดัชนี 5 ออกจากลิสต์ และพิมพ์สมาชิกตัวนั้น	
command.append("print()")
9) นับว่ามีสมาชิก 'c' อยู่กี่ตัวในลิสต์ และพิมพ์จำนวนนั้น	
command.append("print()")
10) ลบสมาชิก 'c' ตัวแรกออกจากลิสต์	
command.append("")

2.ตัดลิสต์

ให้นิสิตใช้เทคนิคการตัดลิสต์เพื่อทำคำสั่งต่อไปนี้ กำหนดให้ลิสต์มีสมาชิกดังนี้

ls = ['a','b','c','d','e','f','g','h','i','j', 'k', 'l']

ให้นิสิตใส่โค๊ดในการตัดลิสต์ในช่องว่างทางขวาที่มีให้ คำสั่ง print จะพิมพ์ลิสต์ที่นิสิตตัดลิสต์เดิมมาสร้างใหม่


คำสั่ง
โค๊ด
1) แสดงค่าข้อมูลตั้งแต่ 'e' ถึง 'j' ออกมา	
"print()"
2) เอาค่าตั้งแต่ 'b' ถึง 'k' โดยก้าวทีละ 3 ตัว	
"print()"
3) เอาค่าตั้งแต่ตัวแรกถึง 'g'	
"print()"
4) เอาค่าตั้งแต่ 'c' ถึงตัวสุดท้าย	
"print()"
5) เริ่มจาก 'j' ให้ถอยหลังทีละ 2 ก้าวจนถึง 'd' (เอา 'd' ด้วย)	
"print()"
6) เอาสมาชิกทุกๆ 3 ตัวเริ่มจากตัวแรก	
"print()"
7) เอาสมาชิกทุก 2 ตัว เริ่มจากดัชนีที่ 2 แต่ไม่เกินดัชนีที่ 9	
"print()"
8) ตัดเอา ['g', 'e', 'c', 'a'] ออกมา	
"print()"

3.ลบข้อมูลซ้ำในลิสต์

จงเขียนฟังก์ชัน remove_duplicates(t) ซึ่งรับลิสต์ t แล้วคืนลิสต์ใหม่ที่เกิดจากการเอาลิสต์ t มาลบสมาชิกที่มีซ้ำออกไป ค่าที่ปรากฏอยู่ในลิสต์ตั้งแต่สองครั้งเป็นต้นไปให้คงตัวแรกไว้แล้วลบตัวที่มาทีหลังออกให้หมด

ตัวอย่าง

>>> remove_duplicates([1, 2, 3, 2, 1, 2, 3, 4])
[1, 2, 3, 4]
>>> remove_duplicates(['a', 'b', 'c', 'e', 'f'])
['a', 'b', 'c', 'e', 'f']
>>> remove_duplicates([2, 2, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3])
[2, 1, 3]
หมายเหตุ: ให้นิสิตเขียนโปรแกรมทดสอบฟังก์ชันเอง

def remove_duplicates(t):
  

4.ลบข้อมูลซ้ำในลิสต์ 2

จงเขียนฟังก์ชัน remove_duplicates_inplace(t) ซึ่งรับลิสต์ t มาแก้ไขโดยลบสมาชิกที่มีซ้ำออกไป ค่าที่ปรากฏอยู่ในลิสต์ตั้งแต่สองครั้งเป็นต้นไปให้คงตัวแรกไว้แล้วลบตัวที่มาทีหลังออกให้หมด ข้อนี้ต่างจากข้อก่อนหน้าคือต้องทำการแก้ไขลิสต์ที่รับเข้ามา ห้ามสร้างลิสต์ใหม่

ตัวอย่าง

>>> remove_duplicates_inplace([1,2,3,2,1,2,3,4])
[1, 2, 3, 4]
>>> remove_duplicates_inplace(['a', 'b', 'c', 'e', 'f'])
['a', 'b', 'c', 'e', 'f']
>>> remove_duplicates_inplace([2, 2, 2, 2, 1, 1, 2, 1, 1, 3, 3, 3])
[2, 1, 3]
หมายเหตุ:

ลิสต์ที่ส่งไปให้ฟังก์ชันต้องได้รับการแก้ไขในตัวมันเอง ห้ามสร้างลิสต์ใหม่
eval(x) เป็นฟังก์ชันที่นำ string x ไปประมวลผลใน python นั่นคือเหมือนเอา x ไปพิมพ์ลงใน python interpreter โดยตรง ในโจทย์นี้ใช้ eval() เพื่อให้โปรแกรมสามารถรับข้อมูลลิสต์ในรูปแบบของ python ได้โดยตรง เช่นใส่ [1,2,3,2] เป็น input ได้เลย ไม่ต้องวนรับค่าทีละตัว นิสิตไม่จำเป็นต้องสนใจการใช้ eval ก็ได้ ให้เขียนฟังก์ชันให้ถูกต้องเท่านั้น

5.ผลบวกของเลข Fibonacci

เลข Fibonacci F(n) มีนิยามดังนี้

F(0) = 1

F(1) = 1

F(2) = F(0) + F(1) = 2

F(3) = F(1) + F(2) = 3

.

.

F(n) = F(n-2) + F(n-1)

ดังนั้นลำดับ Fibonacci เมื่อ n เป็น 6 จึงมีค่าดังนี้ 1, 1, 2, 3, 5, 8, 13

ให้นิสิตเขียนโปรแกรมรับค่า n และตัวอักษร 1 ตัว จากนั้นให้สร้างลำดับ Fibonacci ตั้งแต่ F(0) ถึง F(n) และคำนวณผลรวมของลำดับ Fibonacci ตามตัวอักษรนั้น นั่นคือ

ถ้าตัวอักษรเป็น "e" หรือ "E" ให้แสดงผลบวกของ F(i) เมื่อ 0 <= i <= n และ i เป็นเลขคู่
ถ้าตัวอักษรเป็น "o" หรือ "O" ให้แสดงผลบวกของ F(i) เมื่อ 0 <= i <= n และ i เป็นเลขคี่
เช่น เมื่อ n=6 และตัวอักษรเป็น e เราจะแสดงค่าของ F(0)+F(2)+F(4)+F(6) = 1+2+5+13 =21

ถ้าข้อมูลเข้าผิดพลาดให้พิมพ์คำว่า "ERROR" แล้วจบการทำงาน

ตัวอย่าง

6
e
21
ตัวอย่าง 2

5
O
12